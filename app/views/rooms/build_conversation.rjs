
# TODO
# 1) Test and fix interface in Chrome, Safari, and Opera (briefly check Safari, FF, Chrome, Opera on Mac/Linux/Vista as well)
# 2) debug and adjust timing on dialogue delivery

# set the fade in time for dialogue lines to appear, and the necessary wait time for the
# scroll to happen properly.
fade_in_time = 1.5
fade_out_time = 0.5
scroll_wait_time = 0.2

response_window_default_text = "<h2>Player Responses</h2>"

page.render_dialogue_line(@avatar, @avatar_thumbnail, @dialogue_line, fade_in_time)

page.dialogue_scroll_to_bottom(scroll_wait_time)

# Properly fade player responses and refresh response window
if @dialogue_line.line_generator.name == 'player_response'
  @dialogue_line.self_and_siblings.each { |player_response| page.visual_effect(:fade,
      "player_response_#{player_response.id}",
      :duration => fade_out_time) }
  page.delay(fade_out_time) { page[:response_window].replace_html response_window_default_text }
end

# disable clicking other avatars for the duration of a conversation
page[:click_blocker].show

# redraw any compass doors unlocked by this dialogue line
page[:compass].replace :partial => 'compass', :locals =>
  {:top_entrance => @top_entrance,
  :left_entrance => @left_entrance,
  :right_exit => @right_exit,
  :bottom_exit => @bottom_exit} unless @redraw_compass == false

# draw any media objects made visible by this dialogue line
page.insert_html :bottom, 'media_window',
  :partial => 'media_avatar',
  :collection => @media_objects unless @media_objects.nil?

# start a delay timer to pace all lines of dialogue properly
delay_timer = delay_timer_calc(@dialogue_line)

# start a timer to pace all loading spinners properly; TODO need to carefully revisit this timing issue.
loading_timer = delay_timer_calc(@dialogue_line)/2

# only start the loading timer for long lines
previous_line_is_long = is_dialogue_line_long?(@dialogue_line)

# handle all descendants of the current dialogue line
unless @dialogue_line.descendants.empty?

  @dialogue_line.descendants.each do |descendant|

#    Handle groups of player responses
#    Note that all siblings of a player response will be treated as player responses
    if descendant.line_generator.name == 'player_response'
      @player_responses = descendant.self_and_siblings

      page.delay(loading_timer) do
        page[:response_window].replace_html :partial => 'dialogue_spinner',
          :locals => { :waiting_text => "<em>You begin to type a response...</em>" }
      end if previous_line_is_long

      page.delay(delay_timer) do
        page[:response_window].replace_html :partial => 'player_response',
          :collection => @player_responses,
          :locals => { :room => @room }
        @player_responses.each do |player_response|
          page.hide("player_response_#{player_response.id}")
          page.visual_effect(:appear, "player_response_#{player_response.id}", :duration => fade_in_time)
        end
      end

      break

#    Handle continuations of the conversation which don't include a player response
    else
      page.delay(loading_timer) do
        page[:response_window].replace_html :partial => 'dialogue_spinner',
          :locals => { :waiting_text => "<em>#{descendant.line_generator.short_name} has started typing...</em>" }
      end if previous_line_is_long

      page.delay(delay_timer) do
        page.visual_effect(:fade, "dialogue_spinner", :duration => fade_out_time)
        page.delay(fade_out_time) { page[:response_window].replace_html response_window_default_text }
      end if previous_line_is_long

      page.render_dialogue_line(descendant.line_generator, 
        descendant.line_generator.thumbnail.url(:small),
        descendant,
        fade_in_time,
        delay_timer)
      page.dialogue_scroll_to_bottom(delay_timer + scroll_wait_time)

      previous_line_is_long = is_dialogue_line_long?(descendant)

      loading_timer += delay_timer_calc(descendant)/2
      delay_timer += delay_timer_calc(descendant) unless descendant.descendants.empty?

  #    This is where the conversation ending/reset sequence happens when there are no more descendants
      page.delay(delay_timer) do

        page[:click_blocker].hide

      end if descendant.descendants.empty?
    end

  end # @dialogue_line.descendants.each do...
else

#  For clicks which only yield a single line of dialogue
  page[:click_blocker].hide

end
